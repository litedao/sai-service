#! /usr/bin/env node

const mongoose = require('./schema.js').mongoose;
const settings = require('./settings');

let network = 'main';
let port = 4000;
process.argv.forEach((v, i) => {
  if (v === '--network' && typeof process.argv[i + 1] !== 'undefined') {
    network = process.argv[i + 1];
  }
  if (v === '--port' && typeof process.argv[i + 1] !== 'undefined') {
    port = process.argv[i + 1];
  }
});

const db = `sai-service-${network}${settings.version ? `-${settings.version}` : ''}`;
mongoose.connect(`mongodb://localhost/${db}`, { useMongoClient: true }, (e) => {
  if (!e) {
    var http = require('http');

    http.createServer((req, res) => {
      let ret = '';
      const p = prom(req.url);
      Promise.resolve(p).then((ret) => {
        res.setHeader('Access-Control-Allow-Origin', settings.cors);
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify(ret));
      });
    }).listen(port);
  }
});
console.log(`Server running on port ${port}, reading from DB: ${db}`);

const prom = (url) => {
  const p = new Promise((resolve, reject) => {
    const urlParts = url.split('/');

    const conditions = {};
    const sort = {};
    let skip = 0;
    let limit = null;
    for (i=2; i < urlParts.length; i++) {
      if (urlParts[i].indexOf('=') !== -1) {
        const param = urlParts[i].split('=');
        if (['conditions', 'sort', 'skip', 'limit'].indexOf(param[0]) !== -1) {
          if (param[0] === 'conditions') {
            param[1].split('&').forEach((v) => {
              const keyVal = v.split(':');
              if (keyVal.length === 2) {
                const value = keyVal[1].match(/^\d+$/) ? parseInt(keyVal[1], 10) : (keyVal[1] === 'true' ? true : (keyVal[1] === 'false' ? false : keyVal[1]));
                const index = keyVal[0].replace('.gte', '').replace('.gt', '').replace('.lte', '').replace('.lt', '');
                if (typeof conditions[index] === 'undefined') { conditions[index] = {}; }
                if (keyVal[0].indexOf('.gte') !== -1) {
                  conditions[index]['$gte'] = value;
                } else if (keyVal[0].indexOf('.gt') !== -1) {
                  conditions[index]['$gt'] = value;
                } else if (keyVal[0].indexOf('.lte') !== -1) {
                  conditions[index]['$lte'] = value;
                } else if (keyVal[0].indexOf('.lt') !== -1) {
                  conditions[index]['$lt'] = value;
                } else {
                  conditions[keyVal[0]] = value;
                }
              }
            });
          } else if (param[0] === 'sort') {
            param[1].split('&').forEach((v) => {
              const keyVal = v.split(':');
              if (keyVal.length === 2 && (keyVal[1] === 'asc' || keyVal[1] === 'desc')) {
                const value = keyVal[1] === 'asc' ? 1 : -1;
                const index = keyVal[0];
                sort[index] = value;
              }
            });
          } else if (param[0] === 'skip' && parseInt(param[1], 10) > 0) {
            skip = parseInt(param[1], 10);
          } else if (param[0] === 'limit' && parseInt(param[1], 10) > 0) {
            limit = parseInt(param[1], 10);
          }
        }
      }
    }
    let query = null;
    switch(urlParts[1]) {
      case 'ways':
        query = mongoose.model('Way').collection.find(conditions);
        if (skip && skip > 0) { query = query.skip(skip); }
        if (limit && limit > 0) { query = query.limit(limit); }
        query.sort(sort ? sort : { 'timestamp': 1 }).toArray((e, r) => {
          if (!e) {
            mongoose.model('Way').collection.find().sort({ 'blockNumber': -1 }).limit(1).toArray((e2, r2) => {
              if (!e2) {
                resolve({ lastBlockNumber: r2 && r2[0] ? r2[0].blockNumber : 0, results: r });
              } else {
                reject(e2);
              }
            });
          } else {
            reject(e);
          }
        });
        break;
      case 'pers':
        query = mongoose.model('Per').collection.find(conditions);
        if (skip && skip > 0) { query = query.skip(skip); }
        if (limit && limit > 0) { query = query.limit(limit); }
        query.sort(sort ? sort : { 'timestamp': 1 }).toArray((e, r) => {
          if (!e) {
            mongoose.model('Per').collection.find().sort({ 'blockNumber': -1 }).limit(1).toArray((e2, r2) => {
              if (!e2) {
                resolve({ lastBlockNumber: r2 && r2[0] ? r2[0].blockNumber : 0, results: r });
              } else {
                reject(e2);
              }
            });
          } else {
            reject(e);
          }
        });
        break;
      case 'pips':
        query = mongoose.model('Pip').collection.find(conditions);
        if (skip && skip > 0) { query = query.skip(skip); }
        if (limit && limit > 0) { query = query.limit(limit); }
        query.sort(sort ? sort : { 'timestamp': 1 }).toArray((e, r) => {
          if (!e) {
            mongoose.model('Pip').collection.find().sort({ 'blockNumber': -1 }).limit(1).toArray((e2, r2) => {
              if (!e2) {
                resolve({ lastBlockNumber: r2 && r2[0] ? r2[0].blockNumber : 0, results: r });
              } else {
                reject(e2);
              }
            });
          } else {
            reject(e);
          }
        });
        break;
      case 'peps':
        query = mongoose.model('Pep').collection.find(conditions);
        if (skip && skip > 0) { query = query.skip(skip); }
        if (limit && limit > 0) { query = query.limit(limit); }
        query.sort(sort ? sort : { 'timestamp': 1 }).toArray((e, r) => {
          if (!e) {
            mongoose.model('Pep').collection.find().sort({ 'blockNumber': -1 }).limit(1).toArray((e2, r2) => {
              if (!e2) {
                resolve({ lastBlockNumber: r2 && r2[0] ? r2[0].blockNumber : 0, results: r });
              } else {
                reject(e2);
              }
            });
          } else {
            reject(e);
          }
        });
        break;
      case 'mats':
        query = mongoose.model('Mat').collection.find(conditions);
        if (skip && skip > 0) { query = query.skip(skip); }
        if (limit && limit > 0) { query = query.limit(limit); }
        query.sort(sort ? sort : { 'timestamp': 1 }).toArray((e, r) => {
          if (!e) {
            mongoose.model('Mat').collection.find().sort({ 'blockNumber': -1 }).limit(1).toArray((e2, r2) => {
              if (!e2) {
                resolve({ lastBlockNumber: r2 && r2[0] ? r2[0].blockNumber : 0, results: r });
              } else {
                reject(e2);
              }
            });
          } else {
            reject(e);
          }
        });
        break;
      case 'cupStats':
        const actionCounter = (action) => {
          return new Promise((resolve, reject) => {
            const conditionsC = JSON.parse(JSON.stringify(conditions));
            conditionsC.action = action;
            mongoose.model('CupHistoryAction').collection.find(conditionsC).count((e, r) => {
              if (!e) {
                resolve(r);
              } else {
                reject(e);
              }
            });
          });
        }

        const saiAmounts = (action) => {
          return new Promise((resolve, reject) => {
            const conditionsA = JSON.parse(JSON.stringify(conditions));
            conditionsA['$or'] = [{ action: 'lock' }, { action: 'free' }, { action: 'draw' }, { action: 'wipe' }];
            mongoose.model('CupHistoryAction').collection.aggregate([
                {
                  $match: conditionsA
                },
                {
                  $group: {
                    "_id": '$action',
                    amount: { $sum: '$param' },
                  },
                },
              ]).toArray((e, r) => {
              if (!e) {
                resolve(r);
              } else {
                reject(e);
              }
            });
          });
        }

        const promises = [actionCounter('open'), actionCounter('bite'), actionCounter('shut'), actionCounter('give'), saiAmounts()];

        Promise.all(promises).then(r => {
          const results = { 'openCount' : r[0], 'biteCount': r[1], 'shutCount': r[2], 'giveCount': r[3], 'lockAmount': 0, 'freeAmount': '0', 'drawAmount': 0, 'wipeAmount': 0 };
          r[4].forEach(value => {
            results[`${value._id}Amount`] = value.amount;
          });
          resolve({ results });
        });
        break;
      case 'cupHistoryActions':
        const sortHistory = {};
        if (Object.keys(sort).length > 0) {
          Object.keys(sort).forEach(key => {
            sortHistory[`_id.${key}`] = sort[key];
          })
        } else {
          sortHistory['_id.timestamp'] = 1;
        }
        sortHistory['logIndex'] = 1;

        const options = [
          { '$match': conditions },
          {
            '$group': {
              _id: {
                      action: '$action',
                      cupi: '$cupi',
                      sender: '$sender',
                      param: '$param',
                      blockNumber: '$blockNumber',
                      timestamp: '$timestamp',
                      transactionHash: '$transactionHash'
                    },
              count: { $sum: 1 },
              logIndex: { $last: '$logIndex' }
            }
          },
          { '$sort': sortHistory }
        ]

        mongoose.model('CupHistoryAction').collection.aggregate(options).toArray((e, r) => {
          if (!e) {
            if (skip && skip > 0) { options.push({ '$skip': skip }); }
            if (limit && limit > 0) { options.push({ '$limit': limit }); }

            mongoose.model('CupHistoryAction').collection.aggregate(options).toArray((e2, r2) => {
              if (!e2) {
                mongoose.model('CupHistoryAction').collection.find().sort({ 'blockNumber': -1 }).limit(1).toArray((e3, r3) => {
                  if (!e3) {
                    resolve({ lastBlockNumber: r3 && r3[0] ? r3[0].blockNumber : 0, total: r.length, results: r2.map(val => { val._id.count = val.count; return val._id; }) });
                  } else {
                    reject(e3);
                  }
                });
              } else {
                reject(e2);
              }
            });
          } else {
            reject(e);
          }
        });
        break;
      case 'cups':
        mongoose.model('Var').collection.find().toArray((e, r) => {
          const vars = {};
          r.forEach((item)=> {
            vars[item.name] = item.value;
          });
          if (typeof vars.per === 'undefined') {
            vars.per = 1000000000000000000; // Default value
          }
          if (typeof vars.mat === 'undefined') {
            vars.mat = 1000000000000000000; // Default value
          }
          const ratio = vars.chi * vars.par * vars.mat / (vars.per * vars.pip * 1000000000000000000);
          if (typeof conditions.safe !== 'undefined') {
            const safe = conditions.safe;
            delete conditions.safe;
            conditions.ratio = {};
            conditions.ratio[safe ? '$gte' : '$lt'] = ratio;
          }

          const options = [
            {
              '$project': {
                'cupi': '$cupi',
                'lad': '$lad',
                'ink': '$ink',
                'art': '$art',
                'ire': '$ire',
                'closed': '$closed',
                'lastBlockNumber': '$lastBlockNumber',
                // If art === 0, then cup is safe, so we define a big ratio to pass the condition
                'ratio': { '$cond': [ { '$eq': [ '$art', 0 ] }, 999999999999999, { '$divide': [ '$ink', '$art' ] } ] },
              },
            }
          ]

          options.push({ '$match': conditions });
          options.push({ '$sort': Object.keys(sort).length > 0 ? sort : { 'cupi': 1 } });
          mongoose.model('Cup').collection.aggregate(options).toArray((e, r) => {
            if (!e) {
              if (skip && skip > 0) { options.push({ '$skip': skip }); }
              if (limit && limit > 0) { options.push({ '$limit': limit }); }

              mongoose.model('Cup').collection.aggregate(options).toArray((e2, r2) => {
                if (!e2) {
                  mongoose.model('Cup').collection.find().sort({ 'lastBlockNumber': -1 }).limit(1).toArray((e3, r3) => {
                    if (!e3) {
                      r2.forEach((item, index) => {
                        r2[index].safe = r2[index].closed || r2[index].ratio >= ratio;
                        delete r2[index].ratio;
                      });
                      resolve({ lastBlockNumber: r3 && r3[0] ? r3[0].lastBlockNumber : 0, total: r.length, results: r2 });
                    } else {
                      reject(e3);
                    }
                  });
                } else {
                  reject(e2);
                }
              });
            } else {
              reject(e);
            }
          });
        });
        break;
      default:
        resolve('');
        break;
    }
  });
  return p;
}
